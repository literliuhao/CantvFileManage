package com.cantv.media.center.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table VIDEO_POSITION.
 */
public class VideoPlayerDao extends AbstractDao<VideoPlayer, Long> {

    public static final String TABLENAME = "VIDEO_POSITION";

    /**
     * Properties of entity VideoPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Position = new Property(2, Integer.class, "position", false, "position");
        public final static Property Back1 = new Property(3, String.class, "back1", false, "back1");
        public final static Property Back2 = new Property(4, String.class, "back2", false, "back2");
        public final static Property Back3 = new Property(5, String.class, "back3", false, "back3");
    }

    ;

    public VideoPlayerDao(DaoConfig config) {
        super(config);
    }

    public VideoPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'VIDEO_POSITION' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'name' TEXT," + // 1: name
                "'position' INTEGER," + // 2: position
                "'back1' TEXT," + // 3: back1
                "'back2' TEXT," + // 4: back2
                "'back3' TEXT);"); // 5: back3
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_POSITION'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoPlayer entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(3, position);
        }

        String back1 = entity.getBack1();
        if (back1 != null) {
            stmt.bindString(4, back1);
        }

        String back2 = entity.getBack2();
        if (back2 != null) {
            stmt.bindString(5, back2);
        }

        String back3 = entity.getBack3();
        if (back3 != null) {
            stmt.bindString(6, back3);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public VideoPlayer readEntity(Cursor cursor, int offset) {
        VideoPlayer entity = new VideoPlayer( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // position
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // back1
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // back2
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // back3
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, VideoPlayer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosition(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBack1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBack2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBack3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(VideoPlayer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(VideoPlayer entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
