apply plugin: 'com.android.application'

//ext.appReleaseDir = ""
//def loadProperties() {
//    def proFile = file("../local.properties")
//    Properties p = new Properties()
//    proFile.withInputStream { stream->
//        p.load(stream)
//    }
//    appReleaseDir = p.appReleaseDir
//}
//
//loadProperties()

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.3"

    signingConfigs {
        config {
            keyAlias 'CANTV'
            keyPassword 'cantv2016'
            storeFile file('/home/devuser/keystore/can.jks')
            storePassword 'cantv2016'
        }
    }

    defaultConfig {
        applicationId "com.cantv.media"
        minSdkVersion 19
        targetSdkVersion 23
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        signingConfig signingConfigs.config
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        common{}
        sign828{}
        sign628{}
    }

    lintOptions {
        abortOnError false
    }
}

/**
 * 注意事项
 * 1、不要调整节点的顺序
 * 2、签名配置中的 空字符串 代表默认签名（即android.defaultConfig.signingConfig）
 * 3、要让不同的渠道使用不同签名时，不要在android.buildType下指定签名，否则无法生效
 */
ext.SIGN_CONFIG_FILE = ["",'sign_828.properties','sign_628.properties'] // 签名配置文件
apply from: 'sign.gradle' // 自动签名配置，勿删
android.applicationVariants.all { variant ->
    //修改生成的apk名字
    variant.outputs.each { output ->
        def oldFile = output.outputFile
        if (variant.buildType.name in ['release']) {
            def releaseApkName = "CantvFileManager_${variant.productFlavors[0].name}_v${variant.versionCode}.apk";
            if (project.hasProperty("appReleaseDir")) {
                File releasePath = new File(project.property("appReleaseDir"), "CantvFileManager/${getDate()}");
                output.outputFile = new File(releasePath, releaseApkName);
            } else {
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:21.0.3'
    compile files('libs/blur.jar')
    compile files('libs/core.jar')
    compile files('libs/cybergarage-http.jar')
    compile files('libs/glide-3.7.0.jar')
    compile files('libs/greendao-1.3.7.jar')
    compile files('libs/jcifs-1.3.17.jar')
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
//    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}


def getDate() {
    return formatDateTime('yyyyMMdd');
}

def getDateTime() {
    return formatDateTime('yyyyMMddHHmmss')
}

def formatDateTime(String format) {
    return new Date().format(format)
}
