// 本地签名配置
if (file('keystore.properties').exists()) {
    configSigningConfigs(file('keystore.properties'))
    return
}
// 本地 debug 签名配置
if (file('debugKeystore.properties').exists()) {
    configSigningConfigs(file('debugKeystore.properties'), true, false)
    return
}
// 本地 release 签名配置
if (file('releaseKeystore.properties').exists()) {
    configSigningConfigs(file('releaseKeystore.properties'), false, true)
    return
}

// for jenkins
if (ext.has("SIGN_CONFIG_FILE") && project.hasProperty('sign_config_path')) {
    if (ext.SIGN_CONFIG_FILE instanceof String) {
        println "找到配置文件：${ext.SIGN_CONFIG_FILE}"
        def file = new File(sign_config_path, ext.SIGN_CONFIG_FILE);
        if (file.exists()) {
            println "正在配置签名：${ext.SIGN_CONFIG_FILE}"
            configSigningConfigs(file)
        }
    } else if (ext.SIGN_CONFIG_FILE instanceof Map) {
        println "找到${SIGN_CONFIG_FILE.size()}个签名配置"
        for (flavor in android.productFlavors) {
            def configFileName = ext.SIGN_CONFIG_FILE.get(flavor.name, null)
            if (configFileName == null) {
                println "配置签名失败：${flavor.name} ==> 未配置"
                continue;
            }
            def configFile = new File(sign_config_path, configFileName);
            if (!configFile.exists()) {
                println "配置签名失败：${flavor.name} ==> ${configFileName}(不存在)"
                continue;
            }
            println "正在配置签名：${flavor.name} ==> ${configFileName}"
            def config = createSigningConfig(configFile, configFileName.replaceAll("\\.[\\w\\d]{2,}\$", ""))
            flavor.signingConfig = config
        }
    } else {
        println "ext.SIGN_CONFIG_FILE 仅支持 String、Map<String,String>"
    }
}

// 获取签名配置名
def getSigningConfigName(boolean applyDebug, boolean applyRelease) {
    if (applyDebug && applyRelease) {
        return 'defaultConfig'
    } else if (applyDebug) {
        return 'debug'
    } else if (applyRelease) {
        return 'release'
    }
}
/**
 * 设置签名配置
 * @param configFile 签名配置文件
 * @param applyDebug 是否应用到Debug
 * @param applyRelease 是否应用到Release
 * @return
 */
def configSigningConfigs(File configFile, boolean applyDebug = true, boolean applyRelease = true) {
    def signConfigName = getSigningConfigName(applyDebug, applyRelease);
    def signingConfig = createSigningConfig(configFile, signConfigName)
    if (applyDebug) {
        android.buildTypes.release.signingConfig = signingConfig
    }
    if (applyRelease) {
        android.buildTypes.debug.signingConfig = signingConfig
    }
}

def createSigningConfig(File configFile, String signConfigName) {
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(configFile))
    def signingConfig = android.signingConfigs.maybeCreate(signConfigName);
    signingConfig.keyAlias = keystoreProperties['keyAlias']
    signingConfig.keyPassword = keystoreProperties['keyPassword']
    signingConfig.storeFile = file(keystoreProperties['storeFile'])
    signingConfig.storePassword = keystoreProperties['storePassword']
    return signingConfig
}
